{"version":3,"sources":["store/utility.js","store/reducers/auth.js","store/actions/actionTypes.js","store/reducers/nav.js","store/reducers/message.js","hoc/hoc.js","websocket.js","containers/Chat.js","routes.js","store/actions/auth.js","store/actions/message.js","components/Contact.js","containers/Sidepanel.js","store/actions/nav.js","containers/Profile.js","containers/Form.js","containers/Popup.js","App.js","index.js"],"names":["updateObject","oldObject","updatedProperties","initialState","token","username","error","loading","authStart","state","action","authSuccess","authFail","authLogout","reducer","type","showAddChatPopup","openAddChatPopup","closeAddChatPopup","messages","chats","addMessage","message","setMessages","reverse","setChats","Hoc","props","children","WebSocketService","callbacks","this","socketRef","instance","chatUrl","path","console","log","WebSocket","onopen","onmessage","e","socketNewMessage","data","onerror","onclose","connect","close","parsedData","JSON","parse","command","Object","keys","length","chatId","sendMessage","from","content","messagesCallback","newMessageCallback","send","stringify","err","readyState","WebSocketInstance","getInstance","Chat","messageChangeHandler","event","setState","target","value","sendMessageHandler","preventDefault","messageObject","match","params","chatID","newChatMessage","renderTimestamp","timestamp","timeDiff","Math","round","Date","getTime","renderMessages","currentUser","map","i","arr","key","id","style","marginBottom","className","author","src","scrollToBottom","messagesEnd","scrollIntoView","behavior","initialiseChat","waitForSocketConnection","fetchMessages","newProps","disconnect","callback","component","setTimeout","float","clear","ref","el","onSubmit","onChange","required","placeholder","aria-hidden","React","Component","auth","BaseRouter","exact","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","getUserChats","axios","defaults","headers","Authorization","get","then","res","Contact","to","chatURL","color","picURL","alt","name","antIcon","Icon","fontSize","spin","Sidepanel","loginForm","changeForm","authenticate","login","password","signup","email","password2","undefined","waitForAuthDetails","addChat","activeChats","c","status","indicator","isAuthenticated","onClick","method","htmlFor","userName","post","expirationDate","setItem","catch","authActions","password1","messageActions","Profile","FormItem","Form","Item","HorizontalAddChatForm","usernames","handleChange","handleSubmit","form","validateFields","values","combined","participants","history","push","fieldsError","getFieldDecorator","getFieldsError","getFieldError","userNameError","isFieldTouched","layout","validateStatus","help","rules","mode","width","htmlType","disabled","some","field","AddChatForm","create","withRouter","AddChatModal","centered","footer","visible","isVisible","onCancel","App","addCallbacks","bind","onTryAutoSignup","nav","authenticated","getItem","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","rootReducer","combineReducers","authReducer","navReducer","messageReducer","createStore","applyMiddleware","thunk","configureStore","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ed9b9a8.chunk.js","sourcesContent":["export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    }\r\n}","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n    token: null,\r\n    username: null,\r\n    error: null,\r\n    loading: false\r\n}\r\n\r\nconst authStart = (state, action) => {\r\n    return updateObject(state, {\r\n        error: null,\r\n        loading: true\r\n    });\r\n}\r\n\r\nconst authSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        token: action.token,\r\n        username: action.username,\r\n        error: null,\r\n        loading: false\r\n    });\r\n}\r\n\r\nconst authFail = (state, action) => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    });\r\n}\r\n\r\nconst authLogout = (state, action) => {\r\n    return updateObject(state, {\r\n        token: null\r\n    });\r\n}\r\n\r\nconst reducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.AUTH_START: return authStart(state, action);\r\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\r\n        case actionTypes.AUTH_FAIL: return authFail(state, action);\r\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const AUTH_START = 'AUTH_START';\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_FAIL = 'AUTH_FAIL';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\r\n\r\nexport const OPEN_ADD_CHAT_POPUP = \"OPEN_AND_CHAT_POPUP\";\r\nexport const CLOSE_ADD_CHAT_POPUP = \"CLOSE_ADD_CHAT_POPUP\";\r\n\r\nexport const ADD_MESSAGE = \"ADD_MESSAGE\";\r\nexport const SET_MESSAGES = \"SET_MESSAGES\";\r\n\r\nexport const GET_CHATS_SUCCESS = \"GET_CHATS_SUCCESS\";\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n    showAddChatPopup: false\r\n};\r\n\r\n// Opening Chat Pop-Up window\r\nconst openAddChatPopup = (state, action) => {\r\n    return updateObject(state, { showAddChatPopup: true });\r\n};\r\n\r\n// Close Chat Pop-Up Window\r\nconst closeAddChatPopup = (state, action) => {\r\n    return updateObject(state, { showAddChatPopup: false });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.OPEN_ADD_CHAT_POPUP:\r\n            return openAddChatPopup(state, action);\r\n        case actionTypes.CLOSE_ADD_CHAT_POPUP:\r\n            return closeAddChatPopup(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n  messages: [],\r\n  chats: []\r\n};\r\n\r\n// addMessage to the state which is exactly what was\r\n// happening in Chat.js addMessage and setMessages function.\r\n\r\n// Using spread operator to create a clone of the\r\n// already existing messages in the state.\r\n// But the pass the new message that just added as well.\r\n// Add message method.\r\nconst addMessage = (state, action) => {\r\n  return updateObject(state, {\r\n    messages: [...state.messages, action.message]\r\n  });\r\n};\r\n\r\n// Reverse and Setting messages that received from Chat.js\r\nconst setMessages = (state, action) => {\r\n  return updateObject(state, {\r\n    messages: action.messages.reverse()\r\n  });\r\n};\r\n\r\nconst setChats = (state, action) => {\r\n  return updateObject(state, {\r\n    chats: action.chats\r\n  });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_MESSAGE:\r\n      return addMessage(state, action);\r\n    case actionTypes.SET_MESSAGES:\r\n      return setMessages(state, action);\r\n    case actionTypes.GET_CHATS_SUCCESS:\r\n      return setChats(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","const Hoc = (props) => (\r\n    props.children\r\n)\r\n\r\nexport default Hoc;","class WebSocketService {\r\n\r\n    static instance = null;\r\n    // callbacks Dictionary use for new messages commands\r\n    callbacks = {};\r\n\r\n    static getInstance() {\r\n        if(!WebSocketService.instance){\r\n            WebSocketService.instance = new WebSocketService();\r\n        }\r\n        return WebSocketService.instance;\r\n    }\r\n\r\n    constructor() {\r\n        this.socketRef = null;\r\n    }\r\n\r\n    connect(chatUrl) {\r\n        const path = `ws://127.0.0.1:8000/ws/chat/${chatUrl}/`;\r\n        console.log(path);\r\n        this.socketRef = new WebSocket(path);\r\n        this.socketRef.onopen = () => {\r\n            console.log('websocket open');\r\n        };\r\n//        this.socketNewMessage(JSON.stringify({\r\n//            command: 'fetch_messages'\r\n//        }))\r\n        this.socketRef.onmessage = e => {\r\n            // Sending a message\r\n            this.socketNewMessage(e.data);\r\n        }\r\n        this.socketRef.onerror = e => {\r\n            console.log(e.message);\r\n        }\r\n        this.socketRef.onclose = () => {\r\n            console.log('websocket is closed');\r\n            this.connect();\r\n        }\r\n    }\r\n\r\n    disconnect() {\r\n        this.socketRef.close();\r\n    }\r\n\r\n    socketNewMessage(data){\r\n        // Read an object as JSON File\r\n        const parsedData = JSON.parse(data);\r\n        // If fetch message or new message, then\r\n        // grabing this command, and terminate if the commands\r\n        // then we are going to handle all those messages\r\n        // coming through, and new message handle as new message\r\n        const command = parsedData.command;\r\n        // If Object.keys callbacks, then it goes to 'callbacks = {};'\r\n        if(Object.keys(this.callbacks).length === 0){\r\n            return;\r\n        }\r\n        if(command === 'messages'){\r\n            this.callbacks[command](parsedData.messages);\r\n        }\r\n        console.log(this);\r\n        if(command === 'new_message'){\r\n            /// Problem Area\r\n            this.callbacks[command](parsedData.message);\r\n        }\r\n        console.log(this);\r\n    }\r\n\r\n    // Pass through admin.\r\n    // Add chatID parameter that fetch_messages chatID passed it.\r\n    fetchMessages(username, chatId){\r\n        this.sendMessage({\r\n            command: 'fetch_messages',\r\n            username: username,\r\n            chatId: chatId\r\n        });\r\n        console.log(chatId);\r\n        console.log(username);\r\n    }\r\n\r\n\r\n    newChatMessage(message){\r\n        this.sendMessage({\r\n            command: 'new_message',\r\n            from: message.from,\r\n            message: message.content,\r\n            chatId: message.chatId\r\n        });\r\n        console.log(message);\r\n    }\r\n\r\n    // Basically parsed in the names of functions to actually be called\r\n    // when theses callbacks tlace or these commands are taking place.\r\n    addCallbacks(messagesCallback, newMessageCallback){\r\n        this.callbacks['messages'] = messagesCallback;\r\n        this.callbacks['new_message'] = newMessageCallback;\r\n    }\r\n\r\n    sendMessage(data){\r\n        try{\r\n            this.socketRef.send(JSON.stringify({ ...data }))\r\n        } catch (err){\r\n            console.log(err.message);\r\n        }\r\n    }\r\n\r\n    state() {\r\n        return this.socketRef.readyState;\r\n    }\r\n\r\n    // It has Timeout function, and Chat.js importing this function.\r\n    // Basically ensure that we wait for the connection to be steady.\r\n    // Call this the wait for socket connection method.\r\n//    waitForSocketConnection(callback){\r\n//        const socket = this.socketRef;\r\n//        const recursion = this.waitForSocketConnection;\r\n//        // It can maintain connected conditions.\r\n//\r\n//        setTimeout(\r\n//            // Set Times by seconds milliseconds.\r\n//            function(){\r\n//            if (socket.readyState === 1){\r\n//                console.log('connection is secure');\r\n//                // if didn't pass in a callback,\r\n//                // then call the callback.\r\n//                if(callbacks != null){\r\n//                    callback();\r\n//                }\r\n//                // Otherwise will just return.\r\n//                return;\r\n//            } else {\r\n//                console.log('waiting for connection...');\r\n//                recursion(callback);\r\n//            }\r\n//        }, 1);\r\n//    }\r\n}\r\n\r\n// Call Method 'getInstance()' which is static.\r\nconst WebSocketInstance = WebSocketService.getInstance();\r\n\r\nexport default WebSocketInstance;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n//import Sidepanel from './Sidepanel/Sidepanel';\r\nimport WebSocketInstance from '../websocket';\r\n//import Hoc from '../hoc/hoc';\r\n\r\n\r\nclass Chat extends React.Component {\r\n    // state = {}\r\n    state = { messages: [] };\r\n    initialiseChat() {\r\n        this.waitForSocketConnection(() => {\r\n            // First one is the message callbacks.\r\n            // Second callback is the new message callback.\r\n            // So now added the callback methods to take place\r\n            // on those commands that will receive\r\n            /*WebSocketInstance.addCallbacks(\r\n                this.setMessages.bind(this),\r\n                this.addMessage.bind(this));*/\r\n\r\n            // Add WebSocket instance fetch messages and pass thus dot props\r\n            // that current user which won't be working for now.\r\n            // but It wil get to it eventually so that is the constructor.\r\n\r\n            // Calling fetchMessage commands which is passed in the props.username.\r\n            // To user chatID, add another argument into this method and this is going to be chatID.\r\n            WebSocketInstance.fetchMessages(\r\n                this.props.username,\r\n                this.props.match.params.chatID\r\n            );\r\n        });\r\n\r\n        // Call Connect Method.\r\n        WebSocketInstance.connect(this.props.match.params.chatID);\r\n    }\r\n    constructor(props){\r\n        // Make it WebSocketInstance work when import\r\n        super(props);\r\n        this.initialiseChat();\r\n    }\r\n\r\n    componentWillReceiveProps(newProps){\r\n        console.log(newProps);\r\n        // If the props are updating but it's not a change that involves\r\n        // us navigating to a new chat then we don't want to actually call\r\n        // anything inside here.\r\n\r\n        // We only want to update the connection if we're moving to a new chat.\r\n        // So basically checking did the parameter chatId in the URL meaning this /1\r\n        // /2 /3 did change and if it did then we will disconnect and move to a new chat.\r\n        if(this.props.match.params.chatID !== newProps.match.params.chatID){\r\n            WebSocketInstance.disconnect();\r\n            this.waitForSocketConnection(() => {\r\n                WebSocketInstance.fetchMessages(\r\n                    this.props.username,\r\n                    newProps.match.params.chatID\r\n                );\r\n            });\r\n\r\n            WebSocketInstance.connect(newProps.match.params.chatID);\r\n        }\r\n    }\r\n\r\n    // It has Timeout function, and Chat.js importing this function.\r\n    // Basically ensure that we wait for the connection to be steady.\r\n    // Call this the wait for socket connection method.\r\n    waitForSocketConnection(callback){\r\n        const component = this; // 'this' meaning 'Chat' class\r\n        // const recursion = this.waitForSocketConnection;\r\n        // It can maintain connected conditions.\r\n        setTimeout(\r\n            // Set Times by seconds milliseconds.\r\n            function(){\r\n            if (WebSocketInstance.state() === 1){\r\n                console.log('connection is secure');\r\n                // if didn't pass in a callback,\r\n                // then call the callback.\r\n                callback();\r\n                // Otherwise will just return.\r\n                return;\r\n            } else {\r\n                console.log('waiting for connection...');\r\n                component.waitForSocketConnection(callback);\r\n            }\r\n            // Waiting for socket connection for 100 m/s.\r\n        }, 100);\r\n    }\r\n\r\n    messageChangeHandler = event => {\r\n        this.setState({\r\n            message: event.target.value\r\n        });\r\n    }\r\n\r\n    sendMessageHandler = e => {\r\n        e.preventDefault();\r\n        const messageObject = {\r\n            from: this.props.username,\r\n            content: this.state.message,\r\n            chatId: this.props.match.params.chatID\r\n        };\r\n        WebSocketInstance.newChatMessage(messageObject);\r\n        this.setState({\r\n            message: []\r\n        })\r\n    }\r\n\r\n    renderTimestamp = timestamp => {\r\n        let prefix = '';\r\n        const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000);\r\n        if (timeDiff < 1){ // less than one minutes ago\r\n            prefix = 'just now...';\r\n        } else if(timeDiff < 60 && timeDiff > 1){ // less than sixty minuts ago\r\n            prefix = `${timeDiff} minutes ago`;\r\n        } else if(timeDiff < 24*60 && timeDiff > 60){ // less than 24 hours ago\r\n            prefix = `${Math.round(timeDiff/60)} hours ago`;\r\n        } else if(timeDiff < 31*24*60 && timeDiff > 24*60){ // less than 7 days ago\r\n            prefix = `${Math.round(timeDiff/(60*24))} days ago`;\r\n        } else{\r\n            prefix = `${new Date(timestamp)}`;\r\n        }\r\n        return prefix;\r\n    }\r\n\r\n    // Render Created Messages.\r\n    renderMessages = messages => {\r\n        const currentUser = this.props.username;\r\n        return messages.map((message, i, arr) => (\r\n            <li\r\n                // Connect to 'id''consumer.py'\r\n                key={message.id}\r\n                style={{ marginBottom: arr.length - 1 === i ? \"300px\" : \"15px\" }}\r\n                // Check whether the author is currentUser.\r\n                className={message.author === currentUser ? 'replies' : 'sent'}>\r\n                <img src=\"http://emilcarlsson.se/assets/mikeross.png\" />\r\n                <p>\r\n                    {message.content}\r\n                    <br />\r\n                    <small>\r\n                       {this.renderTimestamp(message.timestamp)}\r\n                    </small>\r\n                </p>\r\n            </li>\r\n        ));\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    render(){\r\n        const messages = this.state.messages;\r\n        return (\r\n            // Define the value property by using Short-circuit-evaluation\r\n            // Like value={this.state.message || ''}\r\n            <div>\r\n                <div className=\"messages\">\r\n                    <ul id=\"chat-log\">\r\n                    {\r\n                        this.props.messages &&\r\n                        this.renderMessages(this.props.messages)\r\n                    }\r\n                    <div style={{ float:\"left\", clear: \"both\" }}\r\n                        ref={(el) => { this.messagesEnd = el; }}>\r\n                    </div>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"message-input\">\r\n                    <form onSubmit={this.sendMessageHandler}>\r\n                        <div className=\"wrap\">\r\n                            <input\r\n                                onChange={this.messageChangeHandler}\r\n                                value={this.state.message || ''}\r\n                                required\r\n                                id=\"chat-message-input\"\r\n                                type=\"text\"\r\n                                placeholder=\"Write your message...\" />\r\n                            <i className=\"fa fa-paperclip attachment\" aria-hidden=\"true\"></i>\r\n                            <button id=\"chat-message-submit\" className=\"submit\">\r\n                                <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n// export default Chat;\r\nconst mapStateToProps = state => {\r\n    return {\r\n        username: state.auth.username,\r\n        messages: state.message.messages\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chat);\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Hoc from \"./hoc/hoc\";\r\n\r\nimport Chat from \"./containers/Chat\";\r\n\r\nconst BaseRouter = () => (\r\n  // We need the name of this parameter,\r\n    // so Chat.js will get this information and use it.\r\n  <Hoc>\r\n    <Route exact path=\"/:chatID/\" component={Chat} />\r\n  </Hoc>\r\n);\r\n\r\nexport default BaseRouter;\r\n","import axios from 'axios';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    }\r\n}\r\n\r\nexport const authSuccess = (username, token) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        token: token,\r\n        username: username\r\n    }\r\n}\r\n\r\nexport const authFail = error => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('expirationDate');\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    };\r\n}\r\n\r\nexport const checkAuthTimeout = expirationTime => {\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout());\r\n        }, expirationTime * 1000)\r\n    }\r\n}\r\n\r\nexport const authLogin = (username, password) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        // Post in Backend Server\r\n        axios.post('http://127.0.0.1:8000/rest-auth/login/', {\r\n            username: username,\r\n            password: password\r\n        })\r\n        .then(res => {\r\n            const token = res.data.key;\r\n            const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('expirationDate', expirationDate);\r\n            dispatch(authSuccess(username, token));\r\n            dispatch(checkAuthTimeout(3600));\r\n        })\r\n        .catch(err => {\r\n            dispatch(authFail(err))\r\n        })\r\n    }\r\n}\r\n\r\nexport const authSignup = (username, email, password1, password2) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\r\n            username: username,\r\n            email: email,\r\n            password1: password1,\r\n            password2: password2\r\n        })\r\n        .then(res => {\r\n            const token = res.data.key;\r\n            const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('expirationDate', expirationDate);\r\n            dispatch(authSuccess(username, token));\r\n            dispatch(checkAuthTimeout(3600));\r\n        })\r\n        .catch(err => {\r\n            dispatch(authFail(err))\r\n        })\r\n    }\r\n}\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        const username = localStorage.getItem('username');\r\n        if (token === undefined) {\r\n            dispatch(logout());\r\n        } else {\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n            if ( expirationDate <= new Date() ) {\r\n                dispatch(logout());\r\n            } else {\r\n                dispatch(authSuccess(username, token));\r\n                dispatch(checkAuthTimeout( (expirationDate.getTime() - new Date().getTime()) / 1000) );\r\n            }\r\n        }\r\n    }\r\n}","import axios from \"axios\";\r\nimport * as actionTypes from \"./actionTypes\";\r\n\r\n// References the add message action type\r\n// which is this addMessage here and we have the\r\n// setMessages.\r\n\r\n// The addMessage take one message and then\r\n// the setMessages takes a bunch of messages.\r\n\r\n// Those of actions are redux actions and what these\r\n// two we can then take a look at the reducers and\r\n// we have them being handled by messages\r\n// which is located in reducers file-directory.\r\nexport const addMessage = message => {\r\n  return {\r\n    type: actionTypes.ADD_MESSAGE,\r\n    message: message\r\n  };\r\n};\r\n\r\nexport const setMessages = messages => {\r\n  return {\r\n    type: actionTypes.SET_MESSAGES,\r\n    messages: messages\r\n  };\r\n};\r\n\r\nconst getUserChatsSuccess = chats => {\r\n  return {\r\n    type: actionTypes.GET_CHATS_SUCCESS,\r\n    chats: chats\r\n  };\r\n};\r\n\r\nexport const getUserChats = (username, token) => {\r\n  return dispatch => {\r\n    axios.defaults.headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Token ${token}`\r\n    };\r\n    axios\r\n      .get(`http://127.0.0.1:8000/chat/?username=${username}`)\r\n      .then(res => dispatch(getUserChatsSuccess(res.data)));\r\n  };\r\n};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Contact = (props) => (\r\n\r\n    <NavLink to={`${props.chatURL}`} style={{ color: '#fff' }}>\r\n        <li className=\"contact\">\r\n            <div className=\"wrap\">\r\n            <span className=\"contact-status online\"></span>\r\n            <img src={props.picURL} alt=\"\" />\r\n            <div className=\"meta\">\r\n                <p className=\"name\">{props.name}</p>\r\n            </div>\r\n            </div>\r\n        </li>\r\n    </NavLink>\r\n)\r\n\r\nexport default Contact;","import React from 'react';\r\nimport Icon from '@ant-design/icons';\r\nimport { Spin } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport * as authActions from '../store/actions/auth';\r\nimport * as navActions from '../store/actions/nav';\r\nimport * as messageActions from '../store/actions/message';\r\nimport Contact from '../components/Contact';\r\n\r\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\n\r\nclass Sidepanel extends React.Component {\r\n\r\n    state = {\r\n        loginForm: true\r\n    }\r\n\r\n    waitForAuthDetails() {\r\n        const component = this;\r\n        setTimeout(function() {\r\n            if (\r\n                // Checking if our component.props.token is not null\r\n                // and it's not undefined, then we're going to call\r\n                // the getUserChats method from redux which is one of the\r\n                // React Module.\r\n                component.props.token !== null &&\r\n                component.props.token !== undefined\r\n            ) {\r\n                component.props.getUserChats(\r\n                    component.props.username,\r\n                    component.props.token\r\n                );\r\n                return;\r\n            } else {\r\n              console.log(\"waiting for authentication details...\");\r\n              // Otherwise, recirculate waitForAuthDetails Method again.\r\n              component.waitForAuthDetails();\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Call waitForAuthDetails Method.\r\n        this.waitForAuthDetails();\r\n    }\r\n\r\n    openAddChatPopup() {\r\n        this.props.addChat();\r\n    }\r\n\r\n    changeForm = () => {\r\n        this.setState({ loginForm: !this.state.loginForm });\r\n    };\r\n\r\n    authenticate = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.loginForm) {\r\n            this.props.login(\r\n                e.target.username.value,\r\n                e.target.password.value\r\n            );\r\n            console.log(e.target.username.value);\r\n            console.log(e.target.password.value);\r\n        } else {\r\n            this.props.signup(\r\n                e.target.username.value,\r\n                e.target.email.value,\r\n                e.target.password.value,\r\n                e.target.password2.value\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let activeChats = this.props.chats.map(c => {\r\n//        const activeChats = this.state.chats.map(c => {\r\n            return (\r\n                <Contact\r\n                    key={c.id}\r\n                    name=\"Harvey Specter\"\r\n                    picURL=\"http://emilcarlsson.se/assets/louislitt.png\"\r\n                    status=\"busy\"\r\n                    chatURL={`/${c.id}`} />\r\n            )\r\n        });\r\n        return (\r\n            <div id=\"sidepanel\">\r\n                <div id=\"profile\">\r\n                    <div className=\"wrap\">\r\n                        <img id=\"profile-img\" src=\"http://emilcarlsson.se/assets/mikeross.png\" className=\"online\" alt=\"\" />\r\n                        <p>Mike Ross</p>\r\n                        <i className=\"fa fa-chevron-down expand-button\" aria-hidden=\"true\"></i>\r\n                        <div id=\"status-options\">\r\n                            <ul>\r\n                            <li id=\"status-online\" className=\"active\"><span className=\"status-circle\"></span> <p>Online</p></li>\r\n                            <li id=\"status-away\"><span className=\"status-circle\"></span> <p>Away</p></li>\r\n                            <li id=\"status-busy\"><span className=\"status-circle\"></span> <p>Busy</p></li>\r\n                            <li id=\"status-offline\"><span className=\"status-circle\"></span> <p>Offline</p></li>\r\n                            </ul>\r\n                        </div>\r\n                        <div id=\"expanded\">\r\n                            {this.props.loading ? (\r\n                            <Spin indicator={antIcon} /> ) : this.props.isAuthenticated ? (\r\n                            <button onClick={() => this.props.logout()} className=\"authBtn\">\r\n                                <span>Logout</span>\r\n                            </button>\r\n                        ) : (\r\n                <div>\r\n                  <form method=\"POST\" onSubmit={this.authenticate}>\r\n                    {\r\n                        this.state.loginForm ? (\r\n\r\n                        <div>\r\n                            <input name=\"username\" type=\"text\" placeholder=\"username\" />\r\n                            <input name=\"password\" type=\"password\" placeholder=\"password\" />\r\n                        </div>\r\n\r\n                       ) : (\r\n\r\n                        <div>\r\n                            <input name=\"username\" type=\"text\" placeholder=\"username\" />\r\n                            <input name=\"email\" type=\"email\" placeholder=\"email\" />\r\n                            <input name=\"password\" type=\"password\" placeholder=\"password\" />\r\n                            <input name=\"password2\" type=\"password\" placeholder=\"password confirm\" />\r\n                        </div>\r\n                    )}\r\n                    <button type=\"submit\">Authenticate</button>\r\n                  </form>\r\n\r\n                  <button onClick={this.changeForm}>Switch</button>\r\n                </div>\r\n                )}\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div id=\"search\">\r\n                <label htmlFor=\"\"><i className=\"fa fa-search\" aria-hidden=\"true\"></i></label>\r\n                <input type=\"text\" placeholder=\"Search contacts...\" />\r\n            </div>\r\n            <div id=\"contacts\">\r\n                <ul>\r\n                    {activeChats}\r\n\r\n                </ul>\r\n            </div>\r\n            <div id=\"bottom-bar\">\r\n                <button id=\"addcontact\" onClick={() => this.openAddChatPopup()}>\r\n                    <i className=\"fa fa-user-plus fa-fw\" aria-hidden=\"true\"></i>\r\n                    <span>Add Chat</span>\r\n                </button>\r\n                <button id=\"settings\">\r\n                    <i className=\"fa fa-cog fa-fw\" aria-hidden=\"true\"></i>\r\n                    <span>Settings</span>\r\n                </button>\r\n            </div>\r\n            </div>\r\n            );\r\n        };\r\n    }\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: state.auth.token !== null,\r\n        loading: state.auth.loading,\r\n        token: state.auth.token,\r\n        username: state.auth.username,\r\n        // Show users messages that they sent.\r\n        chats: state.message.chats\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: (userName, password) => dispatch(authActions.authLogin(userName, password)),\r\n        logout: () => dispatch(authActions.logout()),\r\n        signup: (username, email, password1, password2) => dispatch(authActions.authSignup(username, email, password1, password2)),\r\n        addChat: () => dispatch(navActions.openAddChatPopup()),\r\n        getUserChats: (username, token) => dispatch(messageActions.getUserChats(username, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidepanel);\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const openAddChatPopup = () => {\r\n    return {\r\n        type: actionTypes.OPEN_ADD_CHAT_POPUP\r\n    };\r\n};\r\n\r\nexport const closeAddChatPopup = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_ADD_CHAT_POPUP\r\n    };\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Hoc from '../hoc/hoc';\r\n\r\nclass Profile extends React.Component {\r\n    render() {\r\n        if (this.props.token === null) {\r\n           // Redirect component where the URL to=\"/\" and then\r\n           // we just make sure that our token is also passed in\r\n           // const mapStateToProps Method in our props.\r\n           return <Redirect to=\"/\" />;\r\n        }\r\n        return (\r\n            <div className=\"contact-profile\">\r\n            {\r\n                this.props.username !== null ?\r\n\r\n                <Hoc>\r\n                    <img src=\"http://emilcarlsson.se/assets/harveyspecter.png\" alt=\"\" />\r\n                    <p>{this.props.username}</p>\r\n                    <div className=\"social-media\">\r\n                    <i className=\"fa fa-facebook\" aria-hidden=\"true\"></i>\r\n                    <i className=\"fa fa-twitter\" aria-hidden=\"true\"></i>\r\n                    <i className=\"fa fa-instagram\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </Hoc>\r\n\r\n                :\r\n\r\n                null\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        username: state.auth.username,\r\n        // When User Log-out, Don't show Chat Lists.\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Profile);","import React from \"react\";\r\nimport { Button, Select } from \"antd\";\r\nimport { Form } from '@ant-design/compatible';\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport * as navActions from \"../store/actions/nav\";\r\nimport * as messageActions from \"../store/actions/message\";\r\n\r\nconst FormItem = Form.Item;\r\n\r\nfunction hasErrors(fieldsError) {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass HorizontalAddChatForm extends React.Component {\r\n  state = {\r\n    usernames: [],\r\n    error: null\r\n  };\r\n\r\n  // Easiest way to show value, and that value is constantly updating\r\n  // as a new list of values that's inside the form.\r\n  // It is not necessary to constantly add them ourselves.\r\n  // That something that's already done for us.\r\n  handleChange = value => {\r\n    this.setState({\r\n      usernames: value\r\n    });\r\n  };\r\n\r\n  // To disabled submit button at the beginning.\r\n  componentDidMount() {\r\n    this.props.form.validateFields();\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    // Destructuring usernames using this notation.\r\n    const { usernames } = this.state;\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        // this.props.username is our usernames.\r\n        const combined = [...usernames, this.props.username];\r\n        console.log(combined);\r\n        axios.defaults.headers = {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Token ${this.props.token}`\r\n        };\r\n        axios\r\n          .post(\"http://127.0.0.1:8000/chat/create/\", {\r\n            messages: [],\r\n            participants: combined\r\n          })\r\n          .then(res => {\r\n            // Add a .then method to handle getting that response and\r\n            // basically once we get the response we want to navigate to the chat\r\n            // that we just created.\r\n\r\n            // To close the pop-up and get User Chats.\r\n            // `/${res.data.id}` is the Chat id we just created.\r\n            this.props.history.push(`/${res.data.id}`);\r\n            // Once we've closed the chat then we can say\r\n            // this.props.getUserChats.\r\n            this.props.closeAddChatPopup();\r\n            // And that takes in 'this.props.username'.\r\n            // Show username and token as an arguments.\r\n            this.props.getUserChats(this.props.username, this.props.token);\r\n          })\r\n          .catch(err => {\r\n            // Show the errors.\r\n            console.error(err);\r\n            this.setState({\r\n              error: err\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      getFieldDecorator,\r\n      getFieldsError,\r\n      getFieldError,\r\n      isFieldTouched\r\n    } = this.props.form;\r\n\r\n    // Only Show error after a field is touched.\r\n    const userNameError =\r\n      isFieldTouched(\"userName\") && getFieldError(\"userName\");\r\n    return (\r\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n        {this.state.error ? `${this.state.error}` : null}\r\n        <FormItem\r\n          validateStatus={userNameError ? \"error\" : \"\"}\r\n          help={userNameError || \"\"}\r\n        >\r\n          {getFieldDecorator(\"userName\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message:\r\n                  \"Please input the username of the person you want to chat with\"\r\n              }\r\n            ]\r\n          })(\r\n            // Select\r\n            <Select\r\n              mode=\"tags\"\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Tags Mode\"\r\n              onChange={this.handleChange}\r\n            >\r\n              {[]}\r\n            </Select>\r\n          )}\r\n        </FormItem>\r\n        <FormItem>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            disabled={hasErrors(getFieldsError())}\r\n          >\r\n            Start a chat\r\n          </Button>\r\n        </FormItem>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst AddChatForm = Form.create()(HorizontalAddChatForm);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    token: state.auth.token,\r\n    username: state.auth.username\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    closeAddChatPopup: () => dispatch(navActions.closeAddChatPopup()),\r\n    // Show the Chat ID who just come into to that Chat.\r\n    getUserChats: (username, token) =>\r\n      dispatch(messageActions.getUserChats(username, token))\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(AddChatForm)\r\n);","import React from 'react';\r\nimport { Modal } from 'antd';\r\n// Importing Form\r\nimport Form from \"./Form\";\r\n\r\nclass AddChatModal extends React.Component {\r\n  render() {\r\n    console.log('Testing.....');\r\n    return (\r\n        <Modal\r\n          centered\r\n          footer={ null }\r\n          visible={this.props.isVisible}\r\n          onCancel={this.props.close}\r\n        >\r\n          <Form />\r\n        </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddChatModal;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport BaseRouter from './routes';\r\nimport Sidepanel from './containers/Sidepanel';\r\nimport Profile from './containers/Profile';\r\nimport AddChatModal from './containers/Popup';\r\nimport * as authActions from './store/actions/auth';\r\nimport * as navActions from './store/actions/nav';\r\nimport * as messageActions from \"./store/actions/message\";\r\nimport WebSocketInstance from \"./websocket\";\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.onTryAutoSignup();\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        WebSocketInstance.addCallbacks(\r\n          this.props.setMessages.bind(this),\r\n          this.props.addMessage.bind(this)\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Router>\r\n                <div id=\"frame\">\r\n                    <Sidepanel />\r\n                    <div className=\"content\">\r\n                        <AddChatModal\r\n                          isVisible={this.props.showAddChatPopup}\r\n                          close={() => this.props.closeAddChatPopup() }\r\n                        />\r\n                        <Profile />\r\n                        <BaseRouter />\r\n                    </div>\r\n                </div>\r\n            </Router>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        showAddChatPopup: state.nav.showAddChatPopup,\r\n        authenticated: state.auth.token\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    // Put the addMessage and setMessages which are through dispatch function.\r\n    return {\r\n        onTryAutoSignup: () => dispatch(authActions.authCheckState()),\r\n        closeAddChatPopup: () => dispatch(navActions.closeAddChatPopup()),\r\n        addMessage: message => dispatch(messageActions.addMessage(message)),\r\n        setMessages: messages => dispatch(messageActions.setMessages(messages))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import WebSocketInstance from './websocket';\r\n//import { BrowserRouter as Router } from 'react-router-dom';\r\nimport { createStore, compose, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport \"antd/dist/antd.css\";\r\nimport authReducer from './store/reducers/auth';\r\nimport navReducer from './store/reducers/nav';\r\nimport messageReducer from \"./store/reducers/message\";\r\nimport App from './App';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nfunction configureStore() {\r\n    const rootReducer = combineReducers({\r\n        auth: authReducer,\r\n        nav: navReducer,\r\n        message: messageReducer\r\n    });\r\n\r\n    const store = createStore(\r\n        // authReducer,\r\n        rootReducer,\r\n        composeEnhancers(applyMiddleware(thunk))\r\n    );\r\n\r\n//    if (module.hot) {\r\n//        module.hot.accept('./store/reducers', () => {\r\n//            const nextRootReducer = require('./store/reducers/auth');\r\n//            store.replaceReducer(nextRootReducer);\r\n//        });\r\n//    }\r\n    return store;\r\n}\r\n\r\nconst store = configureStore();\r\n\r\nconst app = (\r\n    <Provider store = { store } >\r\n        <App/ >\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(app, document.getElementById(\"app\"));"],"sourceRoot":""}