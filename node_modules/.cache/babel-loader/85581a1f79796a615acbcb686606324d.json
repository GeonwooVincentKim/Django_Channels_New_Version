{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (username, token) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username: username\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart()); // Post in Backend Server\n\n    axios.post('http://127.0.0.1:8000/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('username', username);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(username, token));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('username', username);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(username, token));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(username, token));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["E:/Django/Django_Channels/Team_Project/Django_Channels_New_Version/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","username","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","password","post","then","res","data","key","expirationDate","Date","getTime","setItem","catch","err","authSignup","email","password1","password2","authCheckState","getItem","undefined"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    }\r\n}\r\n\r\nexport const authSuccess = (username, token) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        token: token,\r\n        username: username\r\n    }\r\n}\r\n\r\nexport const authFail = error => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('expirationDate');\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    };\r\n}\r\n\r\nexport const checkAuthTimeout = expirationTime => {\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout());\r\n        }, expirationTime * 1000)\r\n    }\r\n}\r\n\r\nexport const authLogin = (username, password) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        // Post in Backend Server\r\n        axios.post('http://127.0.0.1:8000/rest-auth/login/', {\r\n            username: username,\r\n            password: password\r\n        })\r\n        .then(res => {\r\n            const token = res.data.key;\r\n            const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('expirationDate', expirationDate);\r\n            dispatch(authSuccess(username, token));\r\n            dispatch(checkAuthTimeout(3600));\r\n        })\r\n        .catch(err => {\r\n            dispatch(authFail(err))\r\n        })\r\n    }\r\n}\r\n\r\nexport const authSignup = (username, email, password1, password2) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\r\n            username: username,\r\n            email: email,\r\n            password1: password1,\r\n            password2: password2\r\n        })\r\n        .then(res => {\r\n            const token = res.data.key;\r\n            const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('expirationDate', expirationDate);\r\n            dispatch(authSuccess(username, token));\r\n            dispatch(checkAuthTimeout(3600));\r\n        })\r\n        .catch(err => {\r\n            dispatch(authFail(err))\r\n        })\r\n    }\r\n}\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        const username = localStorage.getItem('username');\r\n        if (token === undefined) {\r\n            dispatch(logout());\r\n        } else {\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n            if ( expirationDate <= new Date() ) {\r\n                dispatch(logout());\r\n            } else {\r\n                dispatch(authSuccess(username, token));\r\n                dispatch(checkAuthTimeout( (expirationDate.getTime() - new Date().getTime()) / 1000) );\r\n            }\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}