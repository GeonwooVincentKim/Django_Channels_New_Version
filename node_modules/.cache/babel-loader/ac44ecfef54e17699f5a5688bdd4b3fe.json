{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Adminstrator\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Adminstrator\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"C:\\\\Users\\\\Adminstrator\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"C:\\\\Users\\\\Adminstrator\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{connect}from'react-redux';//import Sidepanel from './Sidepanel/Sidepanel';\nimport WebSocketInstance from'../websocket';//import Hoc from '../hoc/hoc';\nvar Chat=/*#__PURE__*/function(_React$Component){_inherits(Chat,_React$Component);var _super=_createSuper(Chat);_createClass(Chat,[{key:\"initialiseChat\",// state = {}\nvalue:function initialiseChat(){var _this2=this;this.waitForSocketConnection(function(){// First one is the message callbacks.\n// Second callback is the new message callback.\n// So now added the callback methods to take place\n// on those commands that will receive\n/*WebSocketInstance.addCallbacks(\r\n                this.setMessages.bind(this),\r\n                this.addMessage.bind(this));*/ // Add WebSocket instance fetch messages and pass thus dot props\n// that current user which won't be working for now.\n// but It wil get to it eventually so that is the constructor.\n// Calling fetchMessage commands which is passed in the props.username.\n// To user chatID, add another argument into this method and this is going to be chatID.\nWebSocketInstance.fetchMessages(_this2.props.username,_this2.props.match.params.chatID);});// Call Connect Method.\nWebSocketInstance.connect(this.props.match.params.chatID);}}]);function Chat(props){var _this;_classCallCheck(this,Chat);// Make it WebSocketInstance work when import\n_this=_super.call(this,props);_this.state={messages:[]};_this.messageChangeHandler=function(event){_this.setState({message:event.target.value});};_this.sendMessageHandler=function(e){e.preventDefault();var messageObject={from:_this.props.username,content:_this.state.message,chatId:_this.props.match.params.chatID};WebSocketInstance.newChatMessage(messageObject);_this.setState({message:[]});};_this.renderTimestamp=function(timestamp){var prefix='';var timeDiff=Math.round((new Date().getTime()-new Date(timestamp).getTime())/60000);if(timeDiff<1){// less than one minutes ago\nprefix='just now...';}else if(timeDiff<60&&timeDiff>1){// less than sixty minuts ago\nprefix=\"\".concat(timeDiff,\" minutes ago\");}else if(timeDiff<24*60&&timeDiff>60){// less than 24 hours ago\nprefix=\"\".concat(Math.round(timeDiff/60),\" hours ago\");}else if(timeDiff<31*24*60&&timeDiff>24*60){// less than 7 days ago\nprefix=\"\".concat(Math.round(timeDiff/(60*24)),\" days ago\");}else{prefix=\"\".concat(new Date(timestamp));}return prefix;};_this.renderMessages=function(messages){var currentUser=_this.props.username;return messages.map(function(message,i,arr){return/*#__PURE__*/React.createElement(\"li\",{// Connect to 'id''consumer.py'\nkey:message.id,style:{marginBottom:arr.length-1===i?\"300px\":\"15px\"}// Check whether the author is currentUser.\n,className:message.author===currentUser?'replies':'sent'},/*#__PURE__*/React.createElement(\"img\",{src:\"http://emilcarlsson.se/assets/mikeross.png\"}),/*#__PURE__*/React.createElement(\"p\",null,message.content,/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"small\",null,_this.renderTimestamp(message.timestamp))));});};_this.scrollToBottom=function(){_this.messagesEnd.scrollIntoView({behavior:\"smooth\"});};_this.initialiseChat();return _this;}_createClass(Chat,[{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(newProps){var _this3=this;console.log(newProps);// If the props are updating but it's not a change that involves\n// us navigating to a new chat then we don't want to actually call\n// anything inside here.\n// We only want to update the connection if we're moving to a new chat.\n// So basically checking did the parameter chatId in the URL meaning this /1\n// /2 /3 did change and if it did then we will disconnect and move to a new chat.\nif(this.props.match.params.chatID!==newProps.match.params.chatID){WebSocketInstance.disconnect();this.waitForSocketConnection(function(){WebSocketInstance.fetchMessages(_this3.props.username,newProps.match.params.chatID);});WebSocketInstance.connect(newProps.match.params.chatID);}}// It has Timeout function, and Chat.js importing this function.\n// Basically ensure that we wait for the connection to be steady.\n// Call this the wait for socket connection method.\n},{key:\"waitForSocketConnection\",value:function waitForSocketConnection(callback){var component=this;// 'this' meaning 'Chat' class\n// const recursion = this.waitForSocketConnection;\n// It can maintain connected conditions.\nsetTimeout(// Set Times by seconds milliseconds.\nfunction(){if(WebSocketInstance.state()===1){console.log('connection is secure');// if didn't pass in a callback,\n// then call the callback.\ncallback();// Otherwise will just return.\nreturn;}else{console.log('waiting for connection...');component.waitForSocketConnection(callback);}// Waiting for socket connection for 100 m/s.\n},100);}},{key:\"componentDidMount\",value:function componentDidMount(){this.scrollToBottom();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){this.scrollToBottom();}},{key:\"render\",value:function render(){var _this4=this;var messages=this.state.messages;return/*#__PURE__*/ (// Define the value property by using Short-circuit-evaluation\n// Like value={this.state.message || ''}\nReact.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"messages\"},/*#__PURE__*/React.createElement(\"ul\",{id:\"chat-log\"},this.props.messages&&this.renderMessages(this.props.messages),/*#__PURE__*/React.createElement(\"div\",{style:{float:\"left\",clear:\"both\"},ref:function ref(el){_this4.messagesEnd=el;}}))),/*#__PURE__*/React.createElement(\"div\",{className:\"message-input\"},/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.sendMessageHandler},/*#__PURE__*/React.createElement(\"div\",{className:\"wrap\"},/*#__PURE__*/React.createElement(\"input\",{onChange:this.messageChangeHandler,value:this.state.message||'',required:true,id:\"chat-message-input\",type:\"text\",placeholder:\"Write your message...\"}),/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-paperclip attachment\",\"aria-hidden\":\"true\"}),/*#__PURE__*/React.createElement(\"button\",{id:\"chat-message-submit\",className:\"submit\"},/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-paper-plane\",\"aria-hidden\":\"true\"})))))));}}]);return Chat;}(React.Component);// export default Chat;\nvar mapStateToProps=function mapStateToProps(state){return{username:state.auth.username,messages:state.message.messages};};export default connect(mapStateToProps)(Chat);","map":{"version":3,"sources":["E:/Django/Django_Channels/Team_Project/Django_Channels_New_Version/src/containers/Chat.js"],"names":["React","connect","WebSocketInstance","Chat","waitForSocketConnection","fetchMessages","props","username","match","params","chatID","state","messages","messageChangeHandler","event","setState","message","target","value","sendMessageHandler","e","preventDefault","messageObject","from","content","chatId","newChatMessage","renderTimestamp","timestamp","prefix","timeDiff","Math","round","Date","getTime","renderMessages","currentUser","map","i","arr","id","marginBottom","length","author","scrollToBottom","messagesEnd","scrollIntoView","behavior","initialiseChat","newProps","console","log","disconnect","callback","component","setTimeout","float","clear","el","Component","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n//import Sidepanel from './Sidepanel/Sidepanel';\r\nimport WebSocketInstance from '../websocket';\r\n//import Hoc from '../hoc/hoc';\r\n\r\n\r\nclass Chat extends React.Component {\r\n    // state = {}\r\n    state = { messages: [] };\r\n    initialiseChat() {\r\n        this.waitForSocketConnection(() => {\r\n            // First one is the message callbacks.\r\n            // Second callback is the new message callback.\r\n            // So now added the callback methods to take place\r\n            // on those commands that will receive\r\n            /*WebSocketInstance.addCallbacks(\r\n                this.setMessages.bind(this),\r\n                this.addMessage.bind(this));*/\r\n\r\n            // Add WebSocket instance fetch messages and pass thus dot props\r\n            // that current user which won't be working for now.\r\n            // but It wil get to it eventually so that is the constructor.\r\n\r\n            // Calling fetchMessage commands which is passed in the props.username.\r\n            // To user chatID, add another argument into this method and this is going to be chatID.\r\n            WebSocketInstance.fetchMessages(\r\n                this.props.username,\r\n                this.props.match.params.chatID\r\n            );\r\n        });\r\n\r\n        // Call Connect Method.\r\n        WebSocketInstance.connect(this.props.match.params.chatID);\r\n    }\r\n    constructor(props){\r\n        // Make it WebSocketInstance work when import\r\n        super(props);\r\n        this.initialiseChat();\r\n    }\r\n\r\n    componentWillReceiveProps(newProps){\r\n        console.log(newProps);\r\n        // If the props are updating but it's not a change that involves\r\n        // us navigating to a new chat then we don't want to actually call\r\n        // anything inside here.\r\n\r\n        // We only want to update the connection if we're moving to a new chat.\r\n        // So basically checking did the parameter chatId in the URL meaning this /1\r\n        // /2 /3 did change and if it did then we will disconnect and move to a new chat.\r\n        if(this.props.match.params.chatID !== newProps.match.params.chatID){\r\n            WebSocketInstance.disconnect();\r\n            this.waitForSocketConnection(() => {\r\n                WebSocketInstance.fetchMessages(\r\n                    this.props.username,\r\n                    newProps.match.params.chatID\r\n                );\r\n            });\r\n\r\n            WebSocketInstance.connect(newProps.match.params.chatID);\r\n        }\r\n    }\r\n\r\n    // It has Timeout function, and Chat.js importing this function.\r\n    // Basically ensure that we wait for the connection to be steady.\r\n    // Call this the wait for socket connection method.\r\n    waitForSocketConnection(callback){\r\n        const component = this; // 'this' meaning 'Chat' class\r\n        // const recursion = this.waitForSocketConnection;\r\n        // It can maintain connected conditions.\r\n        setTimeout(\r\n            // Set Times by seconds milliseconds.\r\n            function(){\r\n            if (WebSocketInstance.state() === 1){\r\n                console.log('connection is secure');\r\n                // if didn't pass in a callback,\r\n                // then call the callback.\r\n                callback();\r\n                // Otherwise will just return.\r\n                return;\r\n            } else {\r\n                console.log('waiting for connection...');\r\n                component.waitForSocketConnection(callback);\r\n            }\r\n            // Waiting for socket connection for 100 m/s.\r\n        }, 100);\r\n    }\r\n\r\n    messageChangeHandler = event => {\r\n        this.setState({\r\n            message: event.target.value\r\n        });\r\n    }\r\n\r\n    sendMessageHandler = e => {\r\n        e.preventDefault();\r\n        const messageObject = {\r\n            from: this.props.username,\r\n            content: this.state.message,\r\n            chatId: this.props.match.params.chatID\r\n        };\r\n        WebSocketInstance.newChatMessage(messageObject);\r\n        this.setState({\r\n            message: []\r\n        })\r\n    }\r\n\r\n    renderTimestamp = timestamp => {\r\n        let prefix = '';\r\n        const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000);\r\n        if (timeDiff < 1){ // less than one minutes ago\r\n            prefix = 'just now...';\r\n        } else if(timeDiff < 60 && timeDiff > 1){ // less than sixty minuts ago\r\n            prefix = `${timeDiff} minutes ago`;\r\n        } else if(timeDiff < 24*60 && timeDiff > 60){ // less than 24 hours ago\r\n            prefix = `${Math.round(timeDiff/60)} hours ago`;\r\n        } else if(timeDiff < 31*24*60 && timeDiff > 24*60){ // less than 7 days ago\r\n            prefix = `${Math.round(timeDiff/(60*24))} days ago`;\r\n        } else{\r\n            prefix = `${new Date(timestamp)}`;\r\n        }\r\n        return prefix;\r\n    }\r\n\r\n    // Render Created Messages.\r\n    renderMessages = messages => {\r\n        const currentUser = this.props.username;\r\n        return messages.map((message, i, arr) => (\r\n            <li\r\n                // Connect to 'id''consumer.py'\r\n                key={message.id}\r\n                style={{ marginBottom: arr.length - 1 === i ? \"300px\" : \"15px\" }}\r\n                // Check whether the author is currentUser.\r\n                className={message.author === currentUser ? 'replies' : 'sent'}>\r\n                <img src=\"http://emilcarlsson.se/assets/mikeross.png\" />\r\n                <p>\r\n                    {message.content}\r\n                    <br />\r\n                    <small>\r\n                       {this.renderTimestamp(message.timestamp)}\r\n                    </small>\r\n                </p>\r\n            </li>\r\n        ));\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    render(){\r\n        const messages = this.state.messages;\r\n        return (\r\n            // Define the value property by using Short-circuit-evaluation\r\n            // Like value={this.state.message || ''}\r\n            <div>\r\n                <div className=\"messages\">\r\n                    <ul id=\"chat-log\">\r\n                    {\r\n                        this.props.messages &&\r\n                        this.renderMessages(this.props.messages)\r\n                    }\r\n                    <div style={{ float:\"left\", clear: \"both\" }}\r\n                        ref={(el) => { this.messagesEnd = el; }}>\r\n                    </div>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"message-input\">\r\n                    <form onSubmit={this.sendMessageHandler}>\r\n                        <div className=\"wrap\">\r\n                            <input\r\n                                onChange={this.messageChangeHandler}\r\n                                value={this.state.message || ''}\r\n                                required\r\n                                id=\"chat-message-input\"\r\n                                type=\"text\"\r\n                                placeholder=\"Write your message...\" />\r\n                            <i className=\"fa fa-paperclip attachment\" aria-hidden=\"true\"></i>\r\n                            <button id=\"chat-message-submit\" className=\"submit\">\r\n                                <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n// export default Chat;\r\nconst mapStateToProps = state => {\r\n    return {\r\n        username: state.auth.username,\r\n        messages: state.message.messages\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chat);\r\n"]},"metadata":{},"sourceType":"module"}