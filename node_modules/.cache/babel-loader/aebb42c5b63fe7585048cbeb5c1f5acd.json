{"ast":null,"code":"import camelCase from 'lodash.camelcase';\nimport upperFirst from 'lodash.upperfirst';\nimport warning from '../_util/warning'; // These props make sure that the SVG behaviours like general text.\n// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4\n\nexport var svgBaseProps = {\n  width: '1em',\n  height: '1em',\n  fill: 'currentColor',\n  'aria-hidden': true,\n  focusable: 'false'\n}; // moved from https://github.com/ant-design/ant-design/blob/master/components/icon/utils.ts\n\nvar fillTester = /-fill$/;\nvar outlineTester = /-o$/;\nvar twoToneTester = /-twotone$/;\nexport function getThemeFromTypeName(type) {\n  var result = null;\n\n  if (fillTester.test(type)) {\n    result = 'filled';\n  } else if (outlineTester.test(type)) {\n    result = 'outlined';\n  } else if (twoToneTester.test(type)) {\n    result = 'twoTone';\n  }\n\n  return result;\n}\nexport function removeTypeTheme(type) {\n  return type.replace(fillTester, '').replace(outlineTester, '').replace(twoToneTester, '');\n}\nvar themeMap = {\n  filled: 'filled',\n  outlined: 'outlined',\n  twoTone: 'twoTone'\n};\nexport function withThemeSuffix(type, theme) {\n  var result = upperFirst(camelCase(type));\n  var realTheme = upperFirst(themeMap[theme]);\n\n  if (theme !== 'outlined' && !realTheme) {\n    warning(false, 'Icon', \"This icon '\".concat(type, \"' has unknown theme '\").concat(theme, \"'\"));\n  }\n\n  return result + realTheme;\n} // For alias or compatibility\n\nexport function alias(type) {\n  var newType = type;\n\n  switch (type) {\n    case 'cross':\n      newType = 'close';\n      break;\n    // https://github.com/ant-design/ant-design/issues/13007\n\n    case 'interation':\n      newType = 'interaction';\n      break;\n    // https://github.com/ant-design/ant-design/issues/16810\n\n    case 'canlendar':\n      newType = 'calendar';\n      break;\n    // https://github.com/ant-design/ant-design/issues/17448\n\n    case 'colum-height':\n      newType = 'column-height';\n      break;\n\n    default:\n  }\n\n  warning(newType === type, 'Icon', \"Icon '\".concat(type, \"' was a typo and is now deprecated, please use '\").concat(newType, \"' instead.\"));\n  return newType;\n}","map":{"version":3,"sources":["E:/Django/Django_Channels/Team_Project/Django_Channels_New_Version/node_modules/@ant-design/compatible/es/icon/utils.js"],"names":["camelCase","upperFirst","warning","svgBaseProps","width","height","fill","focusable","fillTester","outlineTester","twoToneTester","getThemeFromTypeName","type","result","test","removeTypeTheme","replace","themeMap","filled","outlined","twoTone","withThemeSuffix","theme","realTheme","concat","alias","newType"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,OAAP,MAAoB,kBAApB,C,CAAwC;AACxC;;AAEA,OAAO,IAAIC,YAAY,GAAG;AACxBC,EAAAA,KAAK,EAAE,KADiB;AAExBC,EAAAA,MAAM,EAAE,KAFgB;AAGxBC,EAAAA,IAAI,EAAE,cAHkB;AAIxB,iBAAe,IAJS;AAKxBC,EAAAA,SAAS,EAAE;AALa,CAAnB,C,CAMJ;;AAEH,IAAIC,UAAU,GAAG,QAAjB;AACA,IAAIC,aAAa,GAAG,KAApB;AACA,IAAIC,aAAa,GAAG,WAApB;AACA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AACzC,MAAIC,MAAM,GAAG,IAAb;;AAEA,MAAIL,UAAU,CAACM,IAAX,CAAgBF,IAAhB,CAAJ,EAA2B;AACzBC,IAAAA,MAAM,GAAG,QAAT;AACD,GAFD,MAEO,IAAIJ,aAAa,CAACK,IAAd,CAAmBF,IAAnB,CAAJ,EAA8B;AACnCC,IAAAA,MAAM,GAAG,UAAT;AACD,GAFM,MAEA,IAAIH,aAAa,CAACI,IAAd,CAAmBF,IAAnB,CAAJ,EAA8B;AACnCC,IAAAA,MAAM,GAAG,SAAT;AACD;;AAED,SAAOA,MAAP;AACD;AACD,OAAO,SAASE,eAAT,CAAyBH,IAAzB,EAA+B;AACpC,SAAOA,IAAI,CAACI,OAAL,CAAaR,UAAb,EAAyB,EAAzB,EAA6BQ,OAA7B,CAAqCP,aAArC,EAAoD,EAApD,EAAwDO,OAAxD,CAAgEN,aAAhE,EAA+E,EAA/E,CAAP;AACD;AACD,IAAIO,QAAQ,GAAG;AACbC,EAAAA,MAAM,EAAE,QADK;AAEbC,EAAAA,QAAQ,EAAE,UAFG;AAGbC,EAAAA,OAAO,EAAE;AAHI,CAAf;AAKA,OAAO,SAASC,eAAT,CAAyBT,IAAzB,EAA+BU,KAA/B,EAAsC;AAC3C,MAAIT,MAAM,GAAGZ,UAAU,CAACD,SAAS,CAACY,IAAD,CAAV,CAAvB;AACA,MAAIW,SAAS,GAAGtB,UAAU,CAACgB,QAAQ,CAACK,KAAD,CAAT,CAA1B;;AAEA,MAAIA,KAAK,KAAK,UAAV,IAAwB,CAACC,SAA7B,EAAwC;AACtCrB,IAAAA,OAAO,CAAC,KAAD,EAAQ,MAAR,EAAgB,cAAcsB,MAAd,CAAqBZ,IAArB,EAA2B,uBAA3B,EAAoDY,MAApD,CAA2DF,KAA3D,EAAkE,GAAlE,CAAhB,CAAP;AACD;;AAED,SAAOT,MAAM,GAAGU,SAAhB;AACD,C,CAAC;;AAEF,OAAO,SAASE,KAAT,CAAeb,IAAf,EAAqB;AAC1B,MAAIc,OAAO,GAAGd,IAAd;;AAEA,UAAQA,IAAR;AACE,SAAK,OAAL;AACEc,MAAAA,OAAO,GAAG,OAAV;AACA;AACF;;AAEA,SAAK,YAAL;AACEA,MAAAA,OAAO,GAAG,aAAV;AACA;AACF;;AAEA,SAAK,WAAL;AACEA,MAAAA,OAAO,GAAG,UAAV;AACA;AACF;;AAEA,SAAK,cAAL;AACEA,MAAAA,OAAO,GAAG,eAAV;AACA;;AAEF;AApBF;;AAuBAxB,EAAAA,OAAO,CAACwB,OAAO,KAAKd,IAAb,EAAmB,MAAnB,EAA2B,SAASY,MAAT,CAAgBZ,IAAhB,EAAsB,kDAAtB,EAA0EY,MAA1E,CAAiFE,OAAjF,EAA0F,YAA1F,CAA3B,CAAP;AACA,SAAOA,OAAP;AACD","sourcesContent":["import camelCase from 'lodash.camelcase';\r\nimport upperFirst from 'lodash.upperfirst';\r\nimport warning from '../_util/warning'; // These props make sure that the SVG behaviours like general text.\r\n// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4\r\n\r\nexport var svgBaseProps = {\r\n  width: '1em',\r\n  height: '1em',\r\n  fill: 'currentColor',\r\n  'aria-hidden': true,\r\n  focusable: 'false'\r\n}; // moved from https://github.com/ant-design/ant-design/blob/master/components/icon/utils.ts\r\n\r\nvar fillTester = /-fill$/;\r\nvar outlineTester = /-o$/;\r\nvar twoToneTester = /-twotone$/;\r\nexport function getThemeFromTypeName(type) {\r\n  var result = null;\r\n\r\n  if (fillTester.test(type)) {\r\n    result = 'filled';\r\n  } else if (outlineTester.test(type)) {\r\n    result = 'outlined';\r\n  } else if (twoToneTester.test(type)) {\r\n    result = 'twoTone';\r\n  }\r\n\r\n  return result;\r\n}\r\nexport function removeTypeTheme(type) {\r\n  return type.replace(fillTester, '').replace(outlineTester, '').replace(twoToneTester, '');\r\n}\r\nvar themeMap = {\r\n  filled: 'filled',\r\n  outlined: 'outlined',\r\n  twoTone: 'twoTone'\r\n};\r\nexport function withThemeSuffix(type, theme) {\r\n  var result = upperFirst(camelCase(type));\r\n  var realTheme = upperFirst(themeMap[theme]);\r\n\r\n  if (theme !== 'outlined' && !realTheme) {\r\n    warning(false, 'Icon', \"This icon '\".concat(type, \"' has unknown theme '\").concat(theme, \"'\"));\r\n  }\r\n\r\n  return result + realTheme;\r\n} // For alias or compatibility\r\n\r\nexport function alias(type) {\r\n  var newType = type;\r\n\r\n  switch (type) {\r\n    case 'cross':\r\n      newType = 'close';\r\n      break;\r\n    // https://github.com/ant-design/ant-design/issues/13007\r\n\r\n    case 'interation':\r\n      newType = 'interaction';\r\n      break;\r\n    // https://github.com/ant-design/ant-design/issues/16810\r\n\r\n    case 'canlendar':\r\n      newType = 'calendar';\r\n      break;\r\n    // https://github.com/ant-design/ant-design/issues/17448\r\n\r\n    case 'colum-height':\r\n      newType = 'column-height';\r\n      break;\r\n\r\n    default:\r\n  }\r\n\r\n  warning(newType === type, 'Icon', \"Icon '\".concat(type, \"' was a typo and is now deprecated, please use '\").concat(newType, \"' instead.\"));\r\n  return newType;\r\n}"]},"metadata":{},"sourceType":"module"}