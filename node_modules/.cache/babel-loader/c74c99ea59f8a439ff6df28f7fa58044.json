{"ast":null,"code":"var _jsxFileName = \"E:\\\\Django\\\\Django_Channels\\\\Team_Project\\\\Django_Channels_New_Version\\\\src\\\\containers\\\\Chat.js\";\nimport React from 'react';\nimport { connect } from 'react-redux'; //import Sidepanel from './Sidepanel/Sidepanel';\n\nimport WebSocketInstance from '../websocket';\nimport Hoc from '../hoc/hoc';\n\nclass Chat extends React.Component {\n  // state = {}\n  initialiseChat() {\n    this.waitForSocketConnection(() => {\n      // First one is the message callbacks.\n      // Second callback is the new message callback.\n      // So now added the callback methods to take place\n      // on those commands that will receive\n\n      /*WebSocketInstance.addCallbacks(\r\n          this.setMessages.bind(this),\r\n          this.addMessage.bind(this));*/\n      // Add WebSocket instance fetch messages and pass thus dot props\n      // that current user which won't be working for now.\n      // but It wil get to it eventually so that is the constructor.\n      // Calling fetchMessage commands which is passed in the props.username.\n      // To user chatID, add another argument into this method and this is going to be chatID.\n      WebSocketInstance.fetchMessages(this.props.username, this.props.match.params.chatID);\n    }); // Call Connect Method.\n\n    WebSocketInstance.connect(this.props.match.params.chatID);\n  }\n\n  constructor(props) {\n    // Make it WebSocketInstance work when import\n    super(props);\n    this.state = {\n      messages: []\n    };\n\n    this.messageChangeHandler = event => {\n      this.setState({\n        message: event.target.value\n      });\n    };\n\n    this.sendMessageHandler = e => {\n      e.preventDefault();\n      const messageObject = {\n        from: this.props.username,\n        content: this.state.message,\n        chatId: this.props.match.params.chatID\n      };\n      WebSocketInstance.newChatMessage(messageObject);\n      this.setState({\n        message: []\n      });\n    };\n\n    this.renderTimestamp = timestamp => {\n      let prefix = '';\n      const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime()) / 60000);\n\n      if (timeDiff < 1) {\n        // less than one minutes ago\n        prefix = 'just now...';\n      } else if (timeDiff < 60 && timeDiff > 1) {\n        // less than sixty minuts ago\n        prefix = `${timeDiff} minutes ago`;\n      } else if (timeDiff < 24 * 60 && timeDiff > 60) {\n        // less than 24 hours ago\n        prefix = `${Math.round(timeDiff / 60)} hours ago`;\n      } else if (timeDiff < 31 * 24 * 60 && timeDiff > 24 * 60) {\n        // less than 7 days ago\n        prefix = `${Math.round(timeDiff / (60 * 24))} days ago`;\n      } else {\n        prefix = `${new Date(timestamp)}`;\n      }\n\n      return prefix;\n    };\n\n    this.renderMessages = messages => {\n      const currentUser = this.props.username;\n      return messages.map((message, i, arr) => /*#__PURE__*/React.createElement(\"li\", {\n        // Connect to 'id''consumer.py'\n        key: message.id,\n        style: {\n          marginBottom: arr.length - 1 === i ? \"300px\" : \"15px\"\n        } // Check whether the author is currentUser.\n        ,\n        className: message.author === currentUser ? 'replies' : 'sent',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: \"http://emilcarlsson.se/assets/mikeross.png\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      }, message.content, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"small\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }\n      }, this.renderTimestamp(message.timestamp)))));\n    };\n\n    this.scrollToBottom = () => {\n      this.messagesEnd.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.initialiseChat();\n  }\n\n  componentWillReceiveProps(newProps) {\n    console.log(newProps); // If the props are updating but it's not a change that involves\n    // us navigating to a new chat then we don't want to actually call\n    // anything inside here.\n    // We only want to update the connection if we're moving to a new chat.\n    // So basically checking did the parameter chatId in the URL meaning this /1\n    // /2 /3 did change and if it did then we will disconnect and move to a new chat.\n\n    if (this.props.match.params.chatID !== newProps.match.params.chatID) {\n      WebSocketInstance.disconnect();\n      this.waitForSocketConnection(() => {\n        WebSocketInstance.fetchMessages(this.props.username, newProps.match.params.chatID);\n      });\n      WebSocketInstance.connect(newProps.match.params.chatID);\n    }\n  } // It has Timeout function, and Chat.js importing this function.\n  // Basically ensure that we wait for the connection to be steady.\n  // Call this the wait for socket connection method.\n\n\n  waitForSocketConnection(callback) {\n    const component = this; // 'this' meaning 'Chat' class\n    // const recursion = this.waitForSocketConnection;\n    // It can maintain connected conditions.\n\n    setTimeout( // Set Times by seconds milliseconds.\n    function () {\n      if (WebSocketInstance.state() === 1) {\n        console.log('connection is secure'); // if didn't pass in a callback,\n        // then call the callback.\n\n        callback(); // Otherwise will just return.\n\n        return;\n      } else {\n        console.log('waiting for connection...');\n        component.waitForSocketConnection(callback);\n      } // Waiting for socket connection for 100 m/s.\n\n    }, 100);\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  render() {\n    const messages = this.state.messages;\n    return (\n      /*#__PURE__*/\n      // Define the value property by using Short-circuit-evaluation\n      // Like value={this.state.message || ''}\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"messages\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        id: \"chat-log\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }\n      }, this.props.messages && this.renderMessages(this.props.messages), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          float: \"left\",\n          clear: \"both\"\n        },\n        ref: el => {\n          this.messagesEnd = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.sendMessageHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        onChange: this.messageChangeHandler,\n        value: this.state.message || '',\n        required: true,\n        id: \"chat-message-input\",\n        type: \"text\",\n        placeholder: \"Write your message...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-paperclip attachment\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"chat-message-submit\",\n        className: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-paper-plane\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 33\n        }\n      }))))))\n    );\n  }\n\n} // export default Chat;\n\n\nconst mapStateToProps = state => {\n  return {\n    username: state.auth.username,\n    messages: state.message.messages\n  };\n};\n\nexport default connect(mapStateToProps)(Chat);","map":{"version":3,"sources":["E:/Django/Django_Channels/Team_Project/Django_Channels_New_Version/src/containers/Chat.js"],"names":["React","connect","WebSocketInstance","Hoc","Chat","Component","initialiseChat","waitForSocketConnection","fetchMessages","props","username","match","params","chatID","constructor","state","messages","messageChangeHandler","event","setState","message","target","value","sendMessageHandler","e","preventDefault","messageObject","from","content","chatId","newChatMessage","renderTimestamp","timestamp","prefix","timeDiff","Math","round","Date","getTime","renderMessages","currentUser","map","i","arr","id","marginBottom","length","author","scrollToBottom","messagesEnd","scrollIntoView","behavior","componentWillReceiveProps","newProps","console","log","disconnect","callback","component","setTimeout","componentDidMount","componentDidUpdate","render","float","clear","el","mapStateToProps","auth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,cAA9B;AACA,OAAOC,GAAP,MAAgB,YAAhB;;AAGA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AAC/B;AAEAC,EAAAA,cAAc,GAAG;AACb,SAAKC,uBAAL,CAA6B,MAAM;AAC/B;AACA;AACA;AACA;;AACA;;;AAIA;AACA;AACA;AAEA;AACA;AACAL,MAAAA,iBAAiB,CAACM,aAAlB,CACI,KAAKC,KAAL,CAAWC,QADf,EAEI,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,MAF5B;AAIH,KAnBD,EADa,CAsBb;;AACAX,IAAAA,iBAAiB,CAACD,OAAlB,CAA0B,KAAKQ,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,MAAlD;AACH;;AACDC,EAAAA,WAAW,CAACL,KAAD,EAAO;AACd;AACA,UAAMA,KAAN;AAFc,SA1BlBM,KA0BkB,GA1BV;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KA0BU;;AAAA,SAqDlBC,oBArDkB,GAqDKC,KAAK,IAAI;AAC5B,WAAKC,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAEF,KAAK,CAACG,MAAN,CAAaC;AADZ,OAAd;AAGH,KAzDiB;;AAAA,SA2DlBC,kBA3DkB,GA2DGC,CAAC,IAAI;AACtBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,aAAa,GAAG;AAClBC,QAAAA,IAAI,EAAE,KAAKlB,KAAL,CAAWC,QADC;AAElBkB,QAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWK,OAFF;AAGlBS,QAAAA,MAAM,EAAE,KAAKpB,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC;AAHd,OAAtB;AAKAX,MAAAA,iBAAiB,CAAC4B,cAAlB,CAAiCJ,aAAjC;AACA,WAAKP,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KAtEiB;;AAAA,SAwElBW,eAxEkB,GAwEAC,SAAS,IAAI;AAC3B,UAAIC,MAAM,GAAG,EAAb;AACA,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAID,IAAJ,CAASL,SAAT,EAAoBM,OAApB,EAAxB,IAAuD,KAAlE,CAAjB;;AACA,UAAIJ,QAAQ,GAAG,CAAf,EAAiB;AAAE;AACfD,QAAAA,MAAM,GAAG,aAAT;AACH,OAFD,MAEO,IAAGC,QAAQ,GAAG,EAAX,IAAiBA,QAAQ,GAAG,CAA/B,EAAiC;AAAE;AACtCD,QAAAA,MAAM,GAAI,GAAEC,QAAS,cAArB;AACH,OAFM,MAEA,IAAGA,QAAQ,GAAG,KAAG,EAAd,IAAoBA,QAAQ,GAAG,EAAlC,EAAqC;AAAE;AAC1CD,QAAAA,MAAM,GAAI,GAAEE,IAAI,CAACC,KAAL,CAAWF,QAAQ,GAAC,EAApB,CAAwB,YAApC;AACH,OAFM,MAEA,IAAGA,QAAQ,GAAG,KAAG,EAAH,GAAM,EAAjB,IAAuBA,QAAQ,GAAG,KAAG,EAAxC,EAA2C;AAAE;AAChDD,QAAAA,MAAM,GAAI,GAAEE,IAAI,CAACC,KAAL,CAAWF,QAAQ,IAAE,KAAG,EAAL,CAAnB,CAA6B,WAAzC;AACH,OAFM,MAED;AACFD,QAAAA,MAAM,GAAI,GAAE,IAAII,IAAJ,CAASL,SAAT,CAAoB,EAAhC;AACH;;AACD,aAAOC,MAAP;AACH,KAvFiB;;AAAA,SA0FlBM,cA1FkB,GA0FDvB,QAAQ,IAAI;AACzB,YAAMwB,WAAW,GAAG,KAAK/B,KAAL,CAAWC,QAA/B;AACA,aAAOM,QAAQ,CAACyB,GAAT,CAAa,CAACrB,OAAD,EAAUsB,CAAV,EAAaC,GAAb,kBAChB;AACI;AACA,QAAA,GAAG,EAAEvB,OAAO,CAACwB,EAFjB;AAGI,QAAA,KAAK,EAAE;AAAEC,UAAAA,YAAY,EAAEF,GAAG,CAACG,MAAJ,GAAa,CAAb,KAAmBJ,CAAnB,GAAuB,OAAvB,GAAiC;AAAjD,SAHX,CAII;AAJJ;AAKI,QAAA,SAAS,EAAEtB,OAAO,CAAC2B,MAAR,KAAmBP,WAAnB,GAAiC,SAAjC,GAA6C,MAL5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMI;AAAK,QAAA,GAAG,EAAC,4CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKpB,OAAO,CAACQ,OADb,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,KAAKG,eAAL,CAAqBX,OAAO,CAACY,SAA7B,CADJ,CAHJ,CAPJ,CADG,CAAP;AAiBH,KA7GiB;;AAAA,SA+GlBgB,cA/GkB,GA+GD,MAAM;AACnB,WAAKC,WAAL,CAAiBC,cAAjB,CAAgC;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAhC;AACH,KAjHiB;;AAGd,SAAK7C,cAAL;AACH;;AAED8C,EAAAA,yBAAyB,CAACC,QAAD,EAAU;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAD+B,CAE/B;AACA;AACA;AAEA;AACA;AACA;;AACA,QAAG,KAAK5C,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,MAAxB,KAAmCwC,QAAQ,CAAC1C,KAAT,CAAeC,MAAf,CAAsBC,MAA5D,EAAmE;AAC/DX,MAAAA,iBAAiB,CAACsD,UAAlB;AACA,WAAKjD,uBAAL,CAA6B,MAAM;AAC/BL,QAAAA,iBAAiB,CAACM,aAAlB,CACI,KAAKC,KAAL,CAAWC,QADf,EAEI2C,QAAQ,CAAC1C,KAAT,CAAeC,MAAf,CAAsBC,MAF1B;AAIH,OALD;AAOAX,MAAAA,iBAAiB,CAACD,OAAlB,CAA0BoD,QAAQ,CAAC1C,KAAT,CAAeC,MAAf,CAAsBC,MAAhD;AACH;AACJ,GAtD8B,CAwD/B;AACA;AACA;;;AACAN,EAAAA,uBAAuB,CAACkD,QAAD,EAAU;AAC7B,UAAMC,SAAS,GAAG,IAAlB,CAD6B,CACL;AACxB;AACA;;AACAC,IAAAA,UAAU,EACN;AACA,gBAAU;AACV,UAAIzD,iBAAiB,CAACa,KAAlB,OAA8B,CAAlC,EAAoC;AAChCuC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EADgC,CAEhC;AACA;;AACAE,QAAAA,QAAQ,GAJwB,CAKhC;;AACA;AACH,OAPD,MAOO;AACHH,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAG,QAAAA,SAAS,CAACnD,uBAAV,CAAkCkD,QAAlC;AACH,OAXS,CAYV;;AACH,KAfS,EAeP,GAfO,CAAV;AAgBH;;AAgEDG,EAAAA,iBAAiB,GAAG;AAChB,SAAKZ,cAAL;AACH;;AAEDa,EAAAA,kBAAkB,GAAG;AACjB,SAAKb,cAAL;AACH;;AAEDc,EAAAA,MAAM,GAAE;AACJ,UAAM9C,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAA5B;AACA;AAAA;AACI;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAI,QAAA,EAAE,EAAC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKP,KAAL,CAAWO,QAAX,IACA,KAAKuB,cAAL,CAAoB,KAAK9B,KAAL,CAAWO,QAA/B,CAHJ,eAKA;AAAK,QAAA,KAAK,EAAE;AAAE+C,UAAAA,KAAK,EAAC,MAAR;AAAgBC,UAAAA,KAAK,EAAE;AAAvB,SAAZ;AACI,QAAA,GAAG,EAAGC,EAAD,IAAQ;AAAE,eAAKhB,WAAL,GAAmBgB,EAAnB;AAAwB,SAD3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALA,CADJ,CADJ,eAYI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAM,QAAA,QAAQ,EAAE,KAAK1C,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AACI,QAAA,QAAQ,EAAE,KAAKN,oBADnB;AAEI,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWK,OAAX,IAAsB,EAFjC;AAGI,QAAA,QAAQ,MAHZ;AAII,QAAA,EAAE,EAAC,oBAJP;AAKI,QAAA,IAAI,EAAC,MALT;AAMI,QAAA,WAAW,EAAC,uBANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAQI;AAAG,QAAA,SAAS,EAAC,4BAAb;AAA0C,uBAAY,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,eASI;AAAQ,QAAA,EAAE,EAAC,qBAAX;AAAiC,QAAA,SAAS,EAAC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAC,mBAAb;AAAiC,uBAAY,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CATJ,CADJ,CADJ,CAZJ;AAHJ;AAkCH;;AA3L8B,C,CA8LnC;;;AACA,MAAM8C,eAAe,GAAGnD,KAAK,IAAI;AAC7B,SAAO;AACHL,IAAAA,QAAQ,EAAEK,KAAK,CAACoD,IAAN,CAAWzD,QADlB;AAEHM,IAAAA,QAAQ,EAAED,KAAK,CAACK,OAAN,CAAcJ;AAFrB,GAAP;AAIH,CALD;;AAOA,eAAef,OAAO,CAACiE,eAAD,CAAP,CAAyB9D,IAAzB,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n//import Sidepanel from './Sidepanel/Sidepanel';\r\nimport WebSocketInstance from '../websocket';\r\nimport Hoc from '../hoc/hoc';\r\n\r\n\r\nclass Chat extends React.Component {\r\n    // state = {}\r\n    state = { messages: [] };\r\n    initialiseChat() {\r\n        this.waitForSocketConnection(() => {\r\n            // First one is the message callbacks.\r\n            // Second callback is the new message callback.\r\n            // So now added the callback methods to take place\r\n            // on those commands that will receive\r\n            /*WebSocketInstance.addCallbacks(\r\n                this.setMessages.bind(this),\r\n                this.addMessage.bind(this));*/\r\n\r\n            // Add WebSocket instance fetch messages and pass thus dot props\r\n            // that current user which won't be working for now.\r\n            // but It wil get to it eventually so that is the constructor.\r\n\r\n            // Calling fetchMessage commands which is passed in the props.username.\r\n            // To user chatID, add another argument into this method and this is going to be chatID.\r\n            WebSocketInstance.fetchMessages(\r\n                this.props.username,\r\n                this.props.match.params.chatID\r\n            );\r\n        });\r\n\r\n        // Call Connect Method.\r\n        WebSocketInstance.connect(this.props.match.params.chatID);\r\n    }\r\n    constructor(props){\r\n        // Make it WebSocketInstance work when import\r\n        super(props);\r\n        this.initialiseChat();\r\n    }\r\n\r\n    componentWillReceiveProps(newProps){\r\n        console.log(newProps);\r\n        // If the props are updating but it's not a change that involves\r\n        // us navigating to a new chat then we don't want to actually call\r\n        // anything inside here.\r\n\r\n        // We only want to update the connection if we're moving to a new chat.\r\n        // So basically checking did the parameter chatId in the URL meaning this /1\r\n        // /2 /3 did change and if it did then we will disconnect and move to a new chat.\r\n        if(this.props.match.params.chatID !== newProps.match.params.chatID){\r\n            WebSocketInstance.disconnect();\r\n            this.waitForSocketConnection(() => {\r\n                WebSocketInstance.fetchMessages(\r\n                    this.props.username,\r\n                    newProps.match.params.chatID\r\n                );\r\n            });\r\n\r\n            WebSocketInstance.connect(newProps.match.params.chatID);\r\n        }\r\n    }\r\n\r\n    // It has Timeout function, and Chat.js importing this function.\r\n    // Basically ensure that we wait for the connection to be steady.\r\n    // Call this the wait for socket connection method.\r\n    waitForSocketConnection(callback){\r\n        const component = this; // 'this' meaning 'Chat' class\r\n        // const recursion = this.waitForSocketConnection;\r\n        // It can maintain connected conditions.\r\n        setTimeout(\r\n            // Set Times by seconds milliseconds.\r\n            function(){\r\n            if (WebSocketInstance.state() === 1){\r\n                console.log('connection is secure');\r\n                // if didn't pass in a callback,\r\n                // then call the callback.\r\n                callback();\r\n                // Otherwise will just return.\r\n                return;\r\n            } else {\r\n                console.log('waiting for connection...');\r\n                component.waitForSocketConnection(callback);\r\n            }\r\n            // Waiting for socket connection for 100 m/s.\r\n        }, 100);\r\n    }\r\n\r\n    messageChangeHandler = event => {\r\n        this.setState({\r\n            message: event.target.value\r\n        });\r\n    }\r\n\r\n    sendMessageHandler = e => {\r\n        e.preventDefault();\r\n        const messageObject = {\r\n            from: this.props.username,\r\n            content: this.state.message,\r\n            chatId: this.props.match.params.chatID\r\n        };\r\n        WebSocketInstance.newChatMessage(messageObject);\r\n        this.setState({\r\n            message: []\r\n        })\r\n    }\r\n\r\n    renderTimestamp = timestamp => {\r\n        let prefix = '';\r\n        const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000);\r\n        if (timeDiff < 1){ // less than one minutes ago\r\n            prefix = 'just now...';\r\n        } else if(timeDiff < 60 && timeDiff > 1){ // less than sixty minuts ago\r\n            prefix = `${timeDiff} minutes ago`;\r\n        } else if(timeDiff < 24*60 && timeDiff > 60){ // less than 24 hours ago\r\n            prefix = `${Math.round(timeDiff/60)} hours ago`;\r\n        } else if(timeDiff < 31*24*60 && timeDiff > 24*60){ // less than 7 days ago\r\n            prefix = `${Math.round(timeDiff/(60*24))} days ago`;\r\n        } else{\r\n            prefix = `${new Date(timestamp)}`;\r\n        }\r\n        return prefix;\r\n    }\r\n\r\n    // Render Created Messages.\r\n    renderMessages = messages => {\r\n        const currentUser = this.props.username;\r\n        return messages.map((message, i, arr) => (\r\n            <li\r\n                // Connect to 'id''consumer.py'\r\n                key={message.id}\r\n                style={{ marginBottom: arr.length - 1 === i ? \"300px\" : \"15px\" }}\r\n                // Check whether the author is currentUser.\r\n                className={message.author === currentUser ? 'replies' : 'sent'}>\r\n                <img src=\"http://emilcarlsson.se/assets/mikeross.png\" />\r\n                <p>\r\n                    {message.content}\r\n                    <br />\r\n                    <small>\r\n                       {this.renderTimestamp(message.timestamp)}\r\n                    </small>\r\n                </p>\r\n            </li>\r\n        ));\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    render(){\r\n        const messages = this.state.messages;\r\n        return (\r\n            // Define the value property by using Short-circuit-evaluation\r\n            // Like value={this.state.message || ''}\r\n            <div>\r\n                <div className=\"messages\">\r\n                    <ul id=\"chat-log\">\r\n                    {\r\n                        this.props.messages &&\r\n                        this.renderMessages(this.props.messages)\r\n                    }\r\n                    <div style={{ float:\"left\", clear: \"both\" }}\r\n                        ref={(el) => { this.messagesEnd = el; }}>\r\n                    </div>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"message-input\">\r\n                    <form onSubmit={this.sendMessageHandler}>\r\n                        <div className=\"wrap\">\r\n                            <input\r\n                                onChange={this.messageChangeHandler}\r\n                                value={this.state.message || ''}\r\n                                required\r\n                                id=\"chat-message-input\"\r\n                                type=\"text\"\r\n                                placeholder=\"Write your message...\" />\r\n                            <i className=\"fa fa-paperclip attachment\" aria-hidden=\"true\"></i>\r\n                            <button id=\"chat-message-submit\" className=\"submit\">\r\n                                <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n// export default Chat;\r\nconst mapStateToProps = state => {\r\n    return {\r\n        username: state.auth.username,\r\n        messages: state.message.messages\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chat);\r\n"]},"metadata":{},"sourceType":"module"}