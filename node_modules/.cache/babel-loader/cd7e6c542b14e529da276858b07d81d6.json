{"ast":null,"code":"import React from 'react';\nimport * as allIcons from \"@ant-design/icons/es/icons\";\nimport AntdIcon, { createFromIconfontCN, getTwoToneColor, setTwoToneColor } from '@ant-design/icons';\nimport { withThemeSuffix, removeTypeTheme, getThemeFromTypeName, alias } from './utils';\nimport warning from '../_util/warning';\nimport upgradeMessage from '../_util/upgradeMessage';\nvar iconsMap = allIcons;\n\nvar LegacyTypeIcon = function LegacyTypeIcon(props) {\n  var type = props.type,\n      theme = props.theme;\n\n  if (theme) {\n    var themeInName = getThemeFromTypeName(type);\n    warning(!themeInName || theme === themeInName, 'Icon', \"The icon name '\".concat(type, \"' already specify a theme '\").concat(themeInName, \"',\") + \" the 'theme' prop '\".concat(theme, \"' will be ignored.\"));\n  }\n\n  var computedType = withThemeSuffix(removeTypeTheme(alias(type)), theme || 'outlined');\n  var targetIconComponent = iconsMap[computedType];\n  warning(targetIconComponent, 'Icon', \"The icon name '\".concat(type, \"'\").concat(theme ? \"with \".concat(theme) : '', \" doesn't exist, please check it at https://ant.design/components/icon\"));\n  return targetIconComponent ? React.createElement(targetIconComponent, props) : null;\n};\n\nvar Icon = function Icon(props) {\n  var type = props.type,\n      component = props.component,\n      children = props.children;\n  upgradeMessage('Icon');\n  warning(Boolean(type || component || children), 'Icon', 'Should have `type` prop or `component` prop or `children`.');\n\n  if (component || children) {\n    return React.createElement(AntdIcon, Object.assign({}, props));\n  }\n\n  if (typeof type === 'string') {\n    return React.createElement(LegacyTypeIcon, Object.assign({}, props, {\n      type: type\n    }));\n  }\n\n  return React.createElement(AntdIcon, null);\n};\n\nIcon.createFromIconfontCN = createFromIconfontCN;\nIcon.getTwoToneColor = getTwoToneColor;\nIcon.setTwoToneColor = setTwoToneColor;\nexport default Icon;","map":{"version":3,"sources":["E:/Django/Django_Channels/Team_Project/Django_Channels_New_Version/node_modules/@ant-design/compatible/es/icon/index.js"],"names":["React","allIcons","AntdIcon","createFromIconfontCN","getTwoToneColor","setTwoToneColor","withThemeSuffix","removeTypeTheme","getThemeFromTypeName","alias","warning","upgradeMessage","iconsMap","LegacyTypeIcon","props","type","theme","themeInName","concat","computedType","targetIconComponent","createElement","Icon","component","children","Boolean","Object","assign"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,4BAA1B;AACA,OAAOC,QAAP,IAAmBC,oBAAnB,EAAyCC,eAAzC,EAA0DC,eAA1D,QAAiF,mBAAjF;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,oBAA3C,EAAiEC,KAAjE,QAA8E,SAA9E;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,IAAIC,QAAQ,GAAGX,QAAf;;AAEA,IAAIY,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAClD,MAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;AAAA,MACIC,KAAK,GAAGF,KAAK,CAACE,KADlB;;AAGA,MAAIA,KAAJ,EAAW;AACT,QAAIC,WAAW,GAAGT,oBAAoB,CAACO,IAAD,CAAtC;AACAL,IAAAA,OAAO,CAAC,CAACO,WAAD,IAAgBD,KAAK,KAAKC,WAA3B,EAAwC,MAAxC,EAAgD,kBAAkBC,MAAlB,CAAyBH,IAAzB,EAA+B,6BAA/B,EAA8DG,MAA9D,CAAqED,WAArE,EAAkF,IAAlF,IAA0F,sBAAsBC,MAAtB,CAA6BF,KAA7B,EAAoC,oBAApC,CAA1I,CAAP;AACD;;AAED,MAAIG,YAAY,GAAGb,eAAe,CAACC,eAAe,CAACE,KAAK,CAACM,IAAD,CAAN,CAAhB,EAA+BC,KAAK,IAAI,UAAxC,CAAlC;AACA,MAAII,mBAAmB,GAAGR,QAAQ,CAACO,YAAD,CAAlC;AACAT,EAAAA,OAAO,CAACU,mBAAD,EAAsB,MAAtB,EAA8B,kBAAkBF,MAAlB,CAAyBH,IAAzB,EAA+B,GAA/B,EAAoCG,MAApC,CAA2CF,KAAK,GAAG,QAAQE,MAAR,CAAeF,KAAf,CAAH,GAA2B,EAA3E,EAA+E,uEAA/E,CAA9B,CAAP;AACA,SAAOI,mBAAmB,GAAGpB,KAAK,CAACqB,aAAN,CAAoBD,mBAApB,EAAyCN,KAAzC,CAAH,GAAqD,IAA/E;AACD,CAbD;;AAeA,IAAIQ,IAAI,GAAG,SAASA,IAAT,CAAcR,KAAd,EAAqB;AAC9B,MAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;AAAA,MACIQ,SAAS,GAAGT,KAAK,CAACS,SADtB;AAAA,MAEIC,QAAQ,GAAGV,KAAK,CAACU,QAFrB;AAGAb,EAAAA,cAAc,CAAC,MAAD,CAAd;AACAD,EAAAA,OAAO,CAACe,OAAO,CAACV,IAAI,IAAIQ,SAAR,IAAqBC,QAAtB,CAAR,EAAyC,MAAzC,EAAiD,4DAAjD,CAAP;;AAEA,MAAID,SAAS,IAAIC,QAAjB,EAA2B;AACzB,WAAOxB,KAAK,CAACqB,aAAN,CAAoBnB,QAApB,EAA8BwB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,KAAlB,CAA9B,CAAP;AACD;;AAED,MAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOf,KAAK,CAACqB,aAAN,CAAoBR,cAApB,EAAoCa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,KAAlB,EAAyB;AAClEC,MAAAA,IAAI,EAAEA;AAD4D,KAAzB,CAApC,CAAP;AAGD;;AAED,SAAOf,KAAK,CAACqB,aAAN,CAAoBnB,QAApB,EAA8B,IAA9B,CAAP;AACD,CAlBD;;AAoBAoB,IAAI,CAACnB,oBAAL,GAA4BA,oBAA5B;AACAmB,IAAI,CAAClB,eAAL,GAAuBA,eAAvB;AACAkB,IAAI,CAACjB,eAAL,GAAuBA,eAAvB;AACA,eAAeiB,IAAf","sourcesContent":["import React from 'react';\r\nimport * as allIcons from \"@ant-design/icons/es/icons\";\r\nimport AntdIcon, { createFromIconfontCN, getTwoToneColor, setTwoToneColor } from '@ant-design/icons';\r\nimport { withThemeSuffix, removeTypeTheme, getThemeFromTypeName, alias } from './utils';\r\nimport warning from '../_util/warning';\r\nimport upgradeMessage from '../_util/upgradeMessage';\r\nvar iconsMap = allIcons;\r\n\r\nvar LegacyTypeIcon = function LegacyTypeIcon(props) {\r\n  var type = props.type,\r\n      theme = props.theme;\r\n\r\n  if (theme) {\r\n    var themeInName = getThemeFromTypeName(type);\r\n    warning(!themeInName || theme === themeInName, 'Icon', \"The icon name '\".concat(type, \"' already specify a theme '\").concat(themeInName, \"',\") + \" the 'theme' prop '\".concat(theme, \"' will be ignored.\"));\r\n  }\r\n\r\n  var computedType = withThemeSuffix(removeTypeTheme(alias(type)), theme || 'outlined');\r\n  var targetIconComponent = iconsMap[computedType];\r\n  warning(targetIconComponent, 'Icon', \"The icon name '\".concat(type, \"'\").concat(theme ? \"with \".concat(theme) : '', \" doesn't exist, please check it at https://ant.design/components/icon\"));\r\n  return targetIconComponent ? React.createElement(targetIconComponent, props) : null;\r\n};\r\n\r\nvar Icon = function Icon(props) {\r\n  var type = props.type,\r\n      component = props.component,\r\n      children = props.children;\r\n  upgradeMessage('Icon');\r\n  warning(Boolean(type || component || children), 'Icon', 'Should have `type` prop or `component` prop or `children`.');\r\n\r\n  if (component || children) {\r\n    return React.createElement(AntdIcon, Object.assign({}, props));\r\n  }\r\n\r\n  if (typeof type === 'string') {\r\n    return React.createElement(LegacyTypeIcon, Object.assign({}, props, {\r\n      type: type\r\n    }));\r\n  }\r\n\r\n  return React.createElement(AntdIcon, null);\r\n};\r\n\r\nIcon.createFromIconfontCN = createFromIconfontCN;\r\nIcon.getTwoToneColor = getTwoToneColor;\r\nIcon.setTwoToneColor = setTwoToneColor;\r\nexport default Icon;"]},"metadata":{},"sourceType":"module"}